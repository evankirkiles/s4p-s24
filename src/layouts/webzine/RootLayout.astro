---
import Footer from "@/components/webzine/Footer.astro";
import Instructions from "@/components/webzine/Instructions.astro";
import Nav from "@/components/webzine/Nav.astro";
import "@/styles/globals.scss";

interface Props {
  disableBlurAndInstructions?: boolean;
}

const { disableBlurAndInstructions } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="generator" content={Astro.generator} />
    <link
      rel="apple-touch-icon"
      sizes="180x180"
      href="/webzine/apple-touch-icon.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="32x32"
      href="/webzine/favicon-32x32.png"
    />
    <link
      rel="icon"
      type="image/png"
      sizes="16x16"
      href="/webzine/favicon-16x16.png"
    />
    <link rel="manifest" href="/webzine/site.webmanifest" />
    <link
      rel="mask-icon"
      href="/webzine/safari-pinned-tab.svg"
      color="#5bbad5"
    />
    <meta name="msapplication-TileColor" content="#2b5797" />
    <meta name="theme-color" content="#ffffff" />
    <slot name="head" />
  </head>
  <body data-blur-disabled={disableBlurAndInstructions || undefined}>
    <Nav />
    <main id="maincontent">
      <slot />
    </main>
    {!disableBlurAndInstructions && <Instructions />}
    <Footer />
  </body>
</html>

<script>
  const maincontent = document.getElementById("maincontent");
  const instructions = document.getElementById("instructions")!;
  var element = new Image();
  element.name = "BAD ACTRESS DETECTED. INSTALLING MALWARE...";
  var devtoolsOpen = false;
  // @ts-ignore
  element.__defineGetter__("id", function () {
    devtoolsOpen = true; // This only executes when devtools is open.
  });
  let intervalId = setInterval(function () {
    console.log(element);
    if (devtoolsOpen) {
      if (!window.localStorage.getItem("allow-inspect")) {
        maincontent?.remove();
        instructions.innerHTML =
          "invalid access pattern.<br/>invalid access pattern.<br/>invalid access pattern.<br/>invalid access pattern.<br/>invalid access pattern.<br/>";
      }
      clearInterval(intervalId);
    }
  }, 250);
</script>

<style lang="scss" is:global>
  body {
    --color-bg: #0800ff;
    --color-fg: #ffffff;
    --color-hl: #ffff00;

    display: flex;
    flex-direction: column;

    &:not([data-blur-disabled]) > *:not(.Instructions) {
      filter: blur(5px);
    }
  }

  :focus-visible {
    outline: 5px solid var(--color-hl);
    outline-offset: 2px;
  }

  main {
    display: flex;
    flex: 1;
    flex-direction: row;
    justify-content: center;
    margin-inline: auto;
    inline-size: auto;
    max-inline-size: 100%;
  }
</style>
